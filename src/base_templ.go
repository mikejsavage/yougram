// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "encoding/hex"
import "strings"
import "mikegram/sqlc"

func autorefresh() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if !IsReleaseBuild {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\t\tlet checksum = \"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Var2, templ_7745c5c3_Err := templruntime.ScriptContentInsideStringLiteral(checksum)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `base.templ`, Line: 10, Col: 30}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var2)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\";\n\t\t\tsetInterval( function() {\n\t\t\t\tfetch( \"/Special:checksum\" ).then( function( res ) {\n\t\t\t\t\treturn res.ok ? res.text() : null;\n\t\t\t\t} ).then( function( cs ) {\n\t\t\t\t\tif( cs != null && cs != checksum ) {\n\t\t\t\t\t\tlocation.reload();\n\t\t\t\t\t}\n\t\t\t\t} ).catch( function() { } );\n\t\t\t}, 1000 );\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

func isCurrentPage(current_url string, link templ.SafeURL, match_prefix bool) bool {
	if match_prefix {
		return strings.HasPrefix(current_url, string(link))
	}
	return string(link) == current_url
}

func navlink(current_url string, link templ.SafeURL, text string, match_prefix bool) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if isCurrentPage(current_url, link, match_prefix) {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<a class=\"curr\" href=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 templ.SafeURL = link
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var4)))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(text)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `base.templ`, Line: 33, Col: 38}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</a>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<a href=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 templ.SafeURL = link
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var6)))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(text)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `base.templ`, Line: 35, Col: 25}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</a>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

func sidebarAlbum(album sqlc.GetAlbumsForUserRow) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if len(album.KeyPhotoSha256) > 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<img src=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var9 string
			templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs("/Special:thumbnail/" + hex.EncodeToString(album.KeyPhotoSha256))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `base.templ`, Line: 41, Col: 79}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\" style=\"height: 1lh\"> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(album.Name)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `base.templ`, Line: 43, Col: 13}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func createAlbumButton() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var11 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var11 == nil {
			templ_7745c5c3_Var11 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<div x-data=\"{\n\t\tname: &#39;&#39;,\n\t\turl: &#39;&#39;,\n\t\tauto_slug: true,\n\t\tshared: false,\n\t}\"><button command=\"show-modal\" commandfor=\"createalbum\" @click=\"ResetForms\">Create album</button> <dialog x-data=\"{ error: &#39;&#39; }\" style=\"max-width: 20rem\" id=\"createalbum\" @click=\"DialogClicked\"><form hx-put=\"/Special:createAlbum\" x-htmx.json=\"albums\" x-htmx-error=\"error\"><h2>New album</h2><label>Name<br><input type=\"text\" name=\"name\" x-model=\"name\" autocomplete=\"off\" autofocus></label><fieldset><legend><label for=\"url\">URL</label></legend> <input type=\"text\" name=\"url\" x-model=\"url\" autocomplete=\"off\" x-effect=\"if( auto_slug ) { url = MakeSlug( name ); }\" :readonly=\"auto_slug\"> <button style=\"display: inline-flex; align-items: center; gap: 0.25em\" @click=\"selecting = !selecting\"><input type=\"checkbox\" x-model=\"auto_slug\" :checked=\"auto_slug\"> Auto</button></fieldset><label><input type=\"checkbox\" x-model=\"shared\"> Shared</label><div><button type=\"submit\" style=\"width: min-content\">Save</button> <span class=\"error\" x-text=\"error\"></span></div></form></dialog></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func base(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var12 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var12 == nil {
			templ_7745c5c3_Var12 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<!doctype html><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 string
		templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `base.templ`, Line: 90, Col: 15}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "</title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = autorefresh().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<script src=\"/Special:alpinejs-3.14.9.js\" defer></script><script src=\"/Special:htmx-2.0.4.js\"></script><script src=\"/Special:thumbhash-1.0.0.js\"></script><script>\n\tdocument.addEventListener( \"alpine:init\", function() {\n\t\tAlpine.directive( \"htmx\", function( el, { expression, modifiers }, { Alpine } ) {\n\t\t\tel.addEventListener( \"htmx:beforeSwap\", function( ev ) {\n\t\t\t\tif( ev.detail.isError )\n\t\t\t\t\treturn;\n\t\t\t\tev.preventDefault();\n\t\t\t\tAlpine.$data( el )[ expression ] = modifiers.includes( \"json\" ) ? JSON.parse( ev.detail.serverResponse ) : ev.detail.serverResponse;\n\t\t\t\tconsole.log( Alpine.$data( el )[ expression ][ 0 ] );\n\t\t\t\tconsole.log( ev.detail.serverResponse );\n\t\t\t} );\n\t\t} );\n\n\t\tAlpine.directive( \"htmx-err\", function( el, { expression, modifiers }, { Alpine } ) {\n\t\t\tel.addEventListener( \"htmx:beforeRequest\", function( ev ) {\n\t\t\t\tAlpine.$data( el )[ expression ] = \"\";\n\t\t\t} );\n\n\t\t\tel.addEventListener( \"htmx:sendError\", function( ev ) {\n\t\t\t\tAlpine.$data( el )[ expression ] = \"Can't connect to server\";\n\t\t\t} );\n\n\t\t\tel.addEventListener( \"htmx:beforeSwap\", function( ev ) {\n\t\t\t\tif( !ev.detail.isError )\n\t\t\t\t\treturn;\n\t\t\t\tev.preventDefault();\n\t\t\t\tAlpine.$data( el )[ expression ] = modifiers.includes( \"json\" ) ? JSON.parse( ev.detail.serverResponse ) : ev.detail.serverResponse;\n\t\t\t} );\n\t\t} );\n\t} );\n\n\tfunction ResetForms( ev ) {\n\t\tev.target.parentElement.querySelectorAll( \"form\" ).forEach( f => f.reset() );\n\t}\n\n\tfunction DialogClicked( ev ) {\n\t\t// this happens if you click on buttons etc in the dialog\n\t\tif( ev.target.tagName != \"dialog\" ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rect = ev.target.getBoundingClientRect();\n\t\tconst x = ev.clientX;\n\t\tconst y = ev.clientY;\n\t\tif( x < rect.left || y < rect.top || x > rect.left + rect.width || y > rect.top + rect.height ) {\n\t\t\tconsole.log( ev.target );\n\t\t\tev.target.close();\n\t\t}\n\t}\n\t</script><style>\n\t:root {\n\t\t--sidebar-width: 15rem;\n\n\t\t--red: #ff5733;\n\t\t--green: #40d39c;\n\t\t--blue: #69b3e7;\n\n\t\t--sticky-z: 1;\n\t\t--modal-z: 3;\n\n\t\t/* from picocss */\n\t\t--icon-search: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='rgb(136,145,164)' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='11' cy='11' r='8'/%3E%3Cpath d='m21 21-4.3-4.3'/%3E%3C/svg%3E\");\n\t\t/* https://icons8.com/icons/set/cog */\n\t\t--icon-cog: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 50'%3E%3Cpath d='m47.2 21.2-6-1-1.4-3.3 3.5-5q.4-.8-.1-1.2l-4-4a1 1 0 0 0-1.2 0L33.2 10q-1.7-.8-3.5-1.4l-1-5.9a1 1 0 0 0-1-.8h-5.5a1 1 0 0 0-1 .8l-1 5.9q-1.7.5-3.4 1.4L12 6.7a1 1 0 0 0-1.3 0l-3.9 4a1 1 0 0 0 0 1.2l3.3 4.9q-.8 1.5-1.4 3.5l-5.9 1a1 1 0 0 0-.8 1v5.4q0 .9.8 1l5.9 1q.5 1.8 1.4 3.5L6.7 38a1 1 0 0 0 0 1.3l4 3.9q.5.5 1.2 0l4.9-3.3q1.5.9 3.4 1.4l1 5.9q.2.7 1 .8h5.5a1 1 0 0 0 1-.8l1-6q1.8-.4 3.5-1.4l4.9 3.5q.7.4 1.3-.1l3.8-4q.6-.5.1-1.2l-3.5-4.9q.9-1.5 1.5-3.4l5.9-1q.7-.1.8-1v-5.5q-.1-.8-.8-1M25 32a7 7 0 1 1 0-14 7 7 0 0 1 0 14'/%3E%3C/svg%3E\");\n\t}\n\n\t* {\n\t\tbox-sizing: border-box;\n\t}\n\n\t[x-cloak] {\n\t\tdisplay: none !important;\n\t}\n\n\tbody {\n\t\tfont-family: sans-serif;\n\t\tline-height: 1.5;\n\t\tmargin: 0;\n\t}\n\n\tbody:has( dialog:open ) {\n\t\toverflow: hidden;\n\t}\n\n\tbody:has( dialog.fullscreen ) ::backdrop {\n\t\tbackground: rgba( 0, 0, 0, 0.9 );\n\t}\n\n\th1, h2, h3 {\n\t\tmargin: 0;\n\t}\n\n\ta { color: var( --blue ); }\n\ta:visited { color: var( --blue ); }\n\n\tfieldset {\n\t\tborder: 0;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\n\tfieldset:disabled {\n\t\tcolor: #aaa;\n\t}\n\n\tinput[type=text], input[type=password], input[type=search] {\n\t\tborder: 1px solid #767676;\n\t\tborder-radius: 3px;\n\t\tfont-size: 100%;\n\t\tpadding: 0.5rem;\n\t\twidth: 100%;\n\t}\n\n\tinput:focus, input[type=text]:focus, input[type=password]:focus, input[type=search]:focus {\n\t\tborder-color: #333;\n\t\toutline: 1.5px solid var( --blue );\n\t}\n\n\tinput:is(:disabled, :read-only), input[type=text]:is(:disabled, :read-only), input[type=password]:is(:disabled, :read-only) {\n\t\tbackground: #fafafa;\n\t\tcolor: #545454;\n\t}\n\n\tinput[type=radio], input[type=checkbox] {\n\t\tmargin-left: 0;\n\t}\n\n\tinput[type=search] {\n\t\tpadding-left: calc( 0.9rem + 1lh );\n\t\tbackground-image: var( --icon-search );\n\t\tbackground-repeat: no-repeat;\n\t\tbackground-position: 0.5rem center;\n\t\tbackground-size: 1lh;\n\t}\n\n\tbutton {\n\t\tbackground: #efefef;\n\t\tborder: 1px solid #767676;\n\t\tborder-radius: 3px;\n\t\tfont-size: 85%;\n\t\tpadding: 0.25rem 0.5rem;\n\t}\n\n\tbutton:hover { background: #e5e5e5; }\n\tbutton:active { background: #f5f5f5; }\n\n\t@keyframes spinning {\n\t\t0%   { left: 0; }\n\t\t25%  { left: 0.1rem; }\n\t\t75%  { left: -0.1rem; }\n\t\t100% { left: 0; }\n\t}\n\n\tbutton:disabled {\n\t\tposition: relative;\n\t\tanimation spinning 0.15 infinite;\n\t}\n\n\t@media (max-width: 479px) {\n\t\tbutton {\n\t\t\tfont-size: 70%;\n\t\t}\n\t}\n\n\t.error {\n\t\tcolor: var( --red );\n\t\tfont-weight: bold;\n\t}\n\n\t.avatar {\n\t\taspect-ratio: 1;\n\t\tobject-fit: cover;\n\t\tobject-position: 50% 50%;\n\t\tvertical-align: middle;\n\t\tborder-radius: 50%;\n\t}\n\n\tdialog {\n\t\twidth: max-content;\n\t\tpadding: 0.5rem;\n\t\tbackground: #fff;\n\t\tborder: 4px solid #333;\n\t\toutline: 0; /* dialogs get outlines when using arrow keys */\n\t}\n\n\tdialog:has( > form ) {\n\t\ttop: -20%;\n\t}\n\n\tform {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 0.5rem;\n\t}\n\n\tform + form {\n\t\tmargin-top: 1rem;\n\t}\n\n\tform button {\n\t\twidth: max-content;\n\t}\n\t</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func baseWithSidebar(user User, current_url string, title string, body templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var14 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var14 == nil {
			templ_7745c5c3_Var14 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = base(title).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "<style>\n\tmain {\n\t\tmargin-left: var( --sidebar-width );\n\t}\n\t</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}

		albums, err := queries.GetAlbumsForUser(ctx, user.ID)
		if err != nil {
			return err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<script>\n\tfunction MakeSlug( str ) {\n\t\tstr = str.toLowerCase();\n\t\tstr = str.replace( /^\\s+|\\s+$/g, \"\" ); // trim\n\n\t\t// remove diacritics\n\t\tconst from = \"ãàáäâẽèéëêìíïîõòóöôùúüûñç\";\n\t\tconst to   = \"aaaaaeeeeeiiiiooooouuuunc\";\n\t\tfor( let i = 0; i < from.length; i++ ) {\n\t\t\tstr = str.replace( new RegExp( from.charAt( i ), \"g\" ), to.charAt( i ) );\n\t\t}\n\n\t\tstr = str.replace( /[^\\w ]/g, \"\" ); // strip non-chars/letters\n\t\tstr = str.replace(/\\s+/g, '-') // replace whitespace with -\n\n\t\treturn str;\n\t}\n\n\tfunction MakeAlbumList() {\n\t\treturn ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var15, templ_7745c5c3_Err := templruntime.ScriptContentOutsideStringLiteral(toHTMLAlbums(albums))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `base.templ`, Line: 339, Col: 34}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var15)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, ";\n\t}\n\t</script><body x-data=\"{ albums: MakeAlbumList() }\"><nav x-data=\"{ search: &#39;&#39; }\"><style>\n\t\t\t@scope to (dialog) {\n\t\t\t\t:scope {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: column;\n\t\t\t\t\tposition: fixed;\n\t\t\t\t\tleft: 0;\n\t\t\t\t\ttop: 0;\n\t\t\t\t\tbottom: 0;\n\t\t\t\t\twidth: var( --sidebar-width );\n\t\t\t\t\tbackground: #eee;\n\t\t\t\t\tborder-right: 1px solid #ccc;\n\t\t\t\t\tpadding: 0.5rem;\n\t\t\t\t}\n\n\t\t\t\ta {\n\t\t\t\t\tcolor: black;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tgap: 0.5rem;\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t}\n\n\t\t\t\ta:hover {\n\t\t\t\t\ttext-decoration: underline;\n\t\t\t\t}\n\n\t\t\t\ta:visited {\n\t\t\t\t\tcolor: black;\n\t\t\t\t}\n\n\t\t\t\ta img {\n\t\t\t\t\taspect-ratio: 1;\n\t\t\t\t\tobject-fit: cover;\n\t\t\t\t\tobject-position: 50% 50%;\n\t\t\t\t}\n\n\t\t\t\ta.album, button, input {\n\t\t\t\t\tmargin-block: 0.25rem;\n\t\t\t\t}\n\n\t\t\t\tdiv {\n\t\t\t\t\twhite-space: nowrap;\n\t\t\t\t\ttext-overflow: ellipsis;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\n\t\t\t\t.curr {\n\t\t\t\t\tfont-weight: bold;\n\t\t\t\t}\n\n\t\t\t\thr {\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\tborder-color: transparent;\n\t\t\t\t}\n\n\t\t\t\t.placeholder {\n\t\t\t\t\tborder: 1px solid #333;\n\t\t\t\t\twidth: 1lh;\n\t\t\t\t\theight: 1lh;\n\t\t\t\t}\n\t\t\t}\n\t\t\t</style><b>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var16 string
		templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(user.Username)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `base.templ`, Line: 408, Col: 21}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "gram</b><hr>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = navlink(current_url, "/Special:account", "Account settings", false).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "<a href=\"/Special:logout\">Log out</a><hr>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = navlink(current_url, "/", "Library", false).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = navlink(current_url, "/Special:deleted", "Deleted", false).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "<hr>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = createAlbumButton().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "<input type=\"search\" placeholder=\"Search albums\" x-model=\"search\"><template x-for=\"album in albums\"><template x-if=\"album.Name.toLowerCase().includes( search.toLowerCase() )\"><a class=\"album\" :href=\"&#39;/&#39; + album.UrlSlug\" :class=\"window.location.pathname.startsWith( &#39;/&#39; + album.UrlSlug ) ? &#39;curr&#39; : &#39;&#39;\"><template x-if=\"album.KeyPhotoSha256.length &gt; 0\"><img :src=\"&#39;/Special:thumbnail/&#39; + album.KeyPhotoSha256\" style=\"height: 1lh\"></template><template x-if=\"album.KeyPhotoSha256.length == 0\"><span class=\"placeholder\"></span></template><span x-text=\"album.Name\"></span></a></template></template></nav>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = body.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "</body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func guestBase(title string, body templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var17 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var17 == nil {
			templ_7745c5c3_Var17 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = base(title).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = body.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
