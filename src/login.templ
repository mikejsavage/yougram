package main

import (
	"encoding/hex"
	"unicode"
)

templ loginFormTemplate() {
	<!DOCTYPE html>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width,initial-scale=1" />
	<title>yougram</title>

	@autorefresh()
	<script src="/Special:htmx-2.0.4.js"></script>

	<style>
	* {
		box-sizing: border-box;
	}

	html {
		height: 100%;
	}

	body {
		display: flex;
		font-family: sans-serif;
		line-height: 1.5;
		align-items: center;
		justify-content: center;
		height: 100%;
		width: 100%;
		margin: 0;
	}

	@keyframes spinning {
		0%   { left: 0; }
		25%  { left: 0.1rem; }
		75%  { left: -0.1rem; }
		100% { left: 0; }
	}

	input[type=password]:disabled {
		position: relative;
		animation: spinning 0.15s infinite;
	}
	</style>

	<form method="POST"
		hx-post="/Special:authenticate"
		hx-target="#error"
		hx-swap="textContent"
		hx-disabled-elt="find input"
		hx-on::before-request="htmx.find('#error').innerText = ''"
	>
		<style>
		@scope {
			:scope {
				display: flex;
				flex-direction: column;
				align-items: center;
				gap: 0.5rem;
				font-size: 150%;
				max-width: 100%;
				padding: 0.5rem;
			}

			h1 {
				padding: 0;
				margin: 0;
				text-align: center;
			}

			.users {
				display: flex;
				flex-wrap: wrap;
				gap: 1rem;
				justify-content: center;
				max-width: 50vw;
			}

			.users label {
				color: #666;
				cursor: pointer;
				display: flex;
				flex-direction: column;
				align-items: center;
				padding: 1rem;
			}

			.users img {
				aspect-ratio: 1;
				height: 2lh;
				border-radius: 50%;
				object-fit: contain;
				filter: grayscale( 100% );
			}

			.users div {
				display: flex;
				align-items: center;
				justify-content: center;
				width: 2lh;
				height: 2lh;
				border: 2px solid #333;
				border-radius: 50%;
			}

			.users input[type=radio] {
				display: none;
			}

			.users label:has( input:checked ) {
				color: black;
				font-weight: bold;
			}

			.users label:has( input:checked ) img {
				filter: none;
			}

			input[type=password] {
				border: 2px solid #000;
				border-radius: 0;
				font-size: 100%;
				padding: 0.5rem;
				width: 100%;
				max-width: 20rem;
			}

			input[type=password]:focus {
				outline: 2px solid #69b3e7;
			}

			:scope:not(:has(input:checked)) input[type=password] {
				visibility: hidden;
			}

			#error {
				color: #ff5733;
				padding: 0 0.5rem;
				height: 1lh;
			}
		}
		</style>

		<h1><span id="subtitle">you</span>gram</h1>
		<noscript>Sorry but nothing works without Javascript</noscript>

		<div class="users">
			{{ users, err := queries.GetUsers( ctx ) }}
			{{ if err != nil { return err } }}

			for _, user := range users {
				<label onclick="document.getElementById( 'password' ).focus(); document.getElementById( 'subtitle' ).innerText = this.querySelector( 'input' ).value;">
					<input type="radio" name="username" value={ user.Username } required>
					if user.Avatar != nil {
						<img src={ "/Special:avatar/" + hex.EncodeToString( user.Avatar ) }>
					} else {
						<div>{ string( unicode.ToUpper( []rune( user.Username )[ 0 ] ) ) }</div>
					}
					{ user.Username }
				</label>
			}
		</div>

		<input type="password" id="password" name="password" placeholder="Password" required>
		<div id="error"></div>
	</form>
}

templ changePasswordForm( reset bool ) {
	<form
		hx-post={ sel( reset, "/Special:resetPassword", "/Special:password" ) }
		hx-target="find span" hx-disabled-elt="find button"
	>
		if !reset {
			<h1>Password</h1>

			<label>
				Current password
				<input type="password" name="old_password">
			</label>
		}

		<label>
			New password
			<input type="password" name="new_password">
		</label>

		<label>
			Repeat new password
			<input type="password" name="new_password2">
		</label>

		<button type="submit">Change password</button>

		<span class="error"></span>
	</form>
}

templ accountSettingsTemplate() {
	<main style="padding: 0.5rem; max-width: 20rem">
		<script>
		function MakeAvatarForm() {
			return {
				img: null,
				async FilePicked( e ) {
					if( e.target.files.length == 0 ) {
						this.img = null;
						return;
					}

					let reader = new FileReader();
					reader.onload = e => this.img = e.target.result;
					reader.readAsDataURL( e.target.files[ 0 ] );
				}
			}
		}
		</script>
		<form x-data="MakeAvatarForm()"
			hx-post="/Special:avatar" hx-encoding="multipart/form-data"
			hx-target="find span" hx-disabled-elt="find button"
		>
			<h1>Avatar</h1>

			<div style="display: flex; align-items: center; gap: 1rem">
				<img class="avatar" :src="img" x-show="img != null" x-cloak style="width: 2lh">
				<div x-show="img == null" style="width: 2lh; height: 2lh; border: 2px solid #333; border-radius: 50%;"></div>

				<button type="button">
					<label>
						Pick a file
						<input type="file" name="avatar" accept="image/*" @change="FilePicked" style="display: none">
					</label>
				</button>

				<button type="submit" :disabled="img == null">Save</button>
			</div>

			<span class="error"></span>
		</form>

		@changePasswordForm( false )
	</main>
}

templ resetPasswordFormTemplate() {
	<!DOCTYPE html>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width,initial-scale=1" />
	<title>yougram</title>

	@autorefresh()
	<script src="/Special:htmx-2.0.4.js"></script>

	<style>
	* {
		box-sizing: border-box;
	}

	html {
		height: 100%;
	}

	body {
		display: flex;
		font-family: sans-serif;
		line-height: 1.5;
		align-items: center;
		justify-content: center;
		height: 100%;
		width: 100%;
		margin: 0;
	}

	h1 {
		margin: 0;
	}

	form {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		max-width: 20rem;
	}

	input[type=password] {
		border: 1px solid #767676;
		border-radius: 3px;
		font-size: 100%;
		padding: 0.5rem;
		width: 100%;

		&:focus {
			border-color: #333;
			outline: 1.5px solid var( --blue );
		}

		&:is(:disabled, :read-only) {
			background: #fafafa;
			color: #545454;
		}
	}
	</style>

	@changePasswordForm( true )
}
