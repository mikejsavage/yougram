package main

import "encoding/hex"
import "strings"
import "mikegram/sqlc"

templ autorefresh() {
	if !IsReleaseBuild {
		<script>
			let checksum = "{{ checksum }}";
			setInterval( function() {
				fetch( "/Special:checksum" ).then( function( res ) {
					return res.ok ? res.text() : null;
				} ).then( function( cs ) {
					if( cs != null && cs != checksum ) {
						location.reload();
					}
				} ).catch( function() { } );
			}, 1000 );
		</script>
	}
}

func isCurrentPage( current_url string, link templ.SafeURL, match_prefix bool ) bool {
	if match_prefix {
		return strings.HasPrefix( current_url, string( link ) )
	}
	return string( link ) == current_url
}

templ navlinkComplex( current_url string, link templ.SafeURL, text templ.Component, match_prefix bool ) {
	if isCurrentPage( current_url, link, match_prefix ) {
		<a class="curr" href={ link }>@text</a>
	} else {
		<a href={ link }>@text</a>
	}
}

templ navlink( current_url string, link templ.SafeURL, text string, match_prefix bool ) {
	if isCurrentPage( current_url, link, match_prefix ) {
		<a class="curr" href={ link }>{ text }</a>
	} else {
		<a href={ link }>{ text }</a>
	}
}

templ sidebarAlbum( album sqlc.GetAlbumsForUserRow ) {
	if len( album.KeyPhotoSha256 ) > 0 {
		<img src={ "/Special:thumbnail/" + hex.EncodeToString( album.KeyPhotoSha256 ) } style="height: 1lh" />
	}
	{ album.Name }
}

templ createAlbumButton() {
	<div x-data="{
		show: false,
		name: '',
		url: '',
		auto_slug: true,
		shared: false,
	}">
		<button @click="show = true; $el.parentElement.querySelector( 'form' ).reset()">Create album</button>

		<dialog x-cloak x-show="show" x-htmldialog.noscroll="show = false">
			<form>
				<h2>New album</h2>

				<b>Name</b>
				<input type="text" name="name" x-model="name" autocomplete="off" autofocus>

				<div>
					<b>URL</b>
					<label>
						<input type="checkbox" x-model="auto_slug" checked> Auto
					</label>
				</div>

				<input type="text" name="url" x-model="url" autocomplete="off" x-effect="if( auto_slug ) { url = MakeSlug( name ); }" :readonly="auto_slug">

				<label>
					<input type="checkbox" x-model="shared"> Shared
				</label>

				<button type="submit" style="width: min-content">Save</button>

				<div class="error"></div>
			</form>
		</dialog>
	</div>
}

templ base( title string ) {
	<!DOCTYPE html>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width,initial-scale=1" />
	<title>{ title }</title>

	@autorefresh()
	<script src="/Special:alpinejs-dialog-2.1.1.js" defer></script>
	<script src="/Special:alpinejs-3.14.9.js" defer></script>
	<script src="/Special:fuzzysort-3.1.0.js"></script>
	<script src="/Special:htmx-2.0.4.js"></script>
	<script src="/Special:thumbhash-1.0.0.js"></script>

	<style>
	:root {
		--sidebar-width: 15rem;

		--red: #ff5733;
		--green: #40d39c;
		--blue: #69b3e7;

		--sticky-z: 1;
		--fullscreen-z: 2;
		--modal-z: 3;
	}

	* {
		box-sizing: border-box;
	}

	body {
		font-family: sans-serif;
		line-height: 1.5;
		margin: 0;
	}

	body:has( .fullscreen ) {
		overflow: hidden;
	}

	h1, h2  {
		margin: 0;
	}

	a { color: var( --blue ); }
	a:visited { color: var( --blue ); }

	fieldset {
		border: 0;
		margin: 0;
		padding: 0;
	}

	fieldset:disabled {
		color: #aaa;
	}

	input, input[type=text], input[type=password] {
		border: 1px solid #767676;
		border-radius: 3px;
		font-size: 100%;
		padding: 0.5rem;
	}

	input:focus, input[type=text]:focus, input[type=password]:focus {
		border-color: #333;
		outline: 1.5px solid var( --blue );
	}

	input:is(:disabled, :read-only), input[type=text]:is(:disabled, :read-only), input[type=password]:is(:disabled, :read-only) {
		background: #fafafa;
		color: #545454;
	}

	input[type=radio], input[type=checkbox] {
		margin-left: 0;
	}

	button {
		background: #efefef;
		border: 1px solid #767676;
		border-radius: 3px;
		font-size: 85%;
		padding: 0.25rem 0.5rem;
	}

	button:hover { background: #e5e5e5; }
	button:active { background: #f5f5f5; }

	@keyframes spinning {
		0%   { left: 0; }
		25%  { left: 0.1rem; }
		75%  { left: -0.1rem; }
		100% { left: 0; }
	}

	button:disabled {
		position: relative;
		animation spinning 0.15 infinite;
	}

	.error {
		color: var( --red );
		font-weight: bold;
	}

	[x-cloak] {
		display: none !important;
	}

	aside {
		position: sticky;
		top: 0;
		padding: 0.5rem;
		border-bottom: 1px solid #ccc;

		display: flex;
		flex-direction: row;
		align-items: center;
		gap: 1rem;
	}

	dialog {
		top: -20%;
		width: max-content;
		padding: 0.5rem;
		background: #fff;
		border: 4px solid #333;
	}
	</style>
}

templ baseWithSidebar( user User, current_url string, title string, body templ.Component ) {
	@base( title )

	<script>
	function MakeSlug( str ) {
		str = str.toLowerCase();
		str = str.replace( /^\s+|\s+$/g, "" ); // trim

		// remove diacritics
		const from = "ãàáäâẽèéëêìíïîõòóöôùúüûñç";
		const to   = "aaaaaeeeeeiiiiooooouuuunc";
		for( let i = 0; i < from.length; i++ ) {
			str = str.replace( new RegExp( from.charAt( i ), "g" ), to.charAt( i ) );
		}

		str = str.replace( /[^\w ]/g, "" ); // strip non-chars/letters
		str = str.replace(/\s+/g, '-') // replace whitespace with -

		return str;
	}
	</script>

	<nav>
		<style>
		@scope {
			:scope {
				display: flex;
				flex-direction: column;
				position: fixed;
				left: 0;
				top: 0;
				bottom: 0;
				width: var( --sidebar-width );
				background: #eee;
				border-right: 1px solid #ccc;
				padding: 0.5rem;
			}

			a {
				color: black;
				display: flex;
				gap: 0.5rem;
				text-decoration: none;
			}

			a:hover {
				text-decoration: underline;
			}

			a:visited {
				color: black;
			}

			a img {
				aspect-ratio: 1;
				object-fit: cover;
				object-position: 50% 50%;
			}

			a:has( img ) {
				margin-block: 0.25rem;
			}

			div {
				white-space: nowrap;
				text-overflow: ellipsis;
				overflow: hidden;
			}

			.curr {
				font-weight: bold;
			}

			hr {
				width: 50%;
				border-color: transparent;
			}
		}
		</style>

		<b>{ user.Username }gram</b>
		<span>Account settings</span>
		<a href="/Special:logout">Log out</a>

		<hr>

		@navlink( current_url, "/", "Library", false )
		@navlink( current_url, "/Special:deleted", "Deleted", false )

		<hr>

		{{ albums, err := queries.GetAlbumsForUser( ctx, user.ID ) }}
		{{ if err != nil { return err } }}

		for _, album := range albums {
			@navlinkComplex( current_url, templ.URL( "/" + album.UrlSlug ), sidebarAlbum( album ), true )
		}

		@createAlbumButton()
	</nav>

	<main style="margin-left: var( --sidebar-width )">
		@body
	</main>
}

templ guestBase( title string, body templ.Component ) {
	@base( title )
	<main>
		@body
	</main>
}
