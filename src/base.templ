package main

import "encoding/hex"
import "strings"
import "mikegram/sqlc"

templ autorefresh() {
	if !IsReleaseBuild {
		<script>
			let checksum = "{{ checksum }}";
			setInterval( function() {
				fetch( "/Special:checksum" ).then( function( res ) {
					return res.ok ? res.text() : null;
				} ).then( function( cs ) {
					if( cs != null && cs != checksum ) {
						location.reload();
					}
				} ).catch( function() { } );
			}, 1000 );
		</script>
	}
}

func isCurrentPage( current_url string, link templ.SafeURL, match_prefix bool ) bool {
	if match_prefix {
		return strings.HasPrefix( current_url, string( link ) )
	}
	return string( link ) == current_url
}

templ navlink( current_url string, link templ.SafeURL, text string, match_prefix bool ) {
	if isCurrentPage( current_url, link, match_prefix ) {
		<a class="curr" href={ link }>{ text }</a>
	} else {
		<a href={ link }>{ text }</a>
	}
}

templ sidebarAlbum( album sqlc.GetAlbumsForUserRow ) {
	if len( album.KeyPhotoSha256 ) > 0 {
		<img src={ "/Special:thumbnail/" + hex.EncodeToString( album.KeyPhotoSha256 ) } style="height: 1lh">
	}
	{ album.Name }
}

templ createAlbumButton() {
	<div x-data="{
		name: '',
		url: '',
		auto_slug: true,
		shared: false,
	}">
		<button command="show-modal" commandfor="createalbum" @click="ResetForms">Create album</button>

		<dialog x-data="{ error: '' }" style="max-width: 20rem" id="createalbum" @click="DialogClicked" @yougram:album_created="$el.close()">
			<form hx-put="/Special:createAlbum" x-htmx.json="albums" x-htmx-error="error">
				<h2>New album</h2>

				<label>
					Name
					<br>
					<input type="text" name="name" x-model="name" autocomplete="off" autofocus>
				</label>

				<fieldset>
					<legend><label for="url">URL</label></legend>
					<input type="text" name="url" x-model="url" autocomplete="off" x-effect="if( auto_slug ) { url = MakeSlug( name ); }" :readonly="auto_slug">
					<button style="display: inline-flex; align-items: center; gap: 0.25em" @click="selecting = !selecting">
						<input type="checkbox" x-model="auto_slug" :checked="auto_slug"> Auto
					</button>
				</fieldset>

				<label>
					<input type="checkbox" x-model="shared"> Shared
				</label>

				<div>
					<button type="submit" style="width: min-content">Save</button>
					<span class="error" x-text="error"></span>
				</div>
			</form>
		</dialog>
	</div>
}

templ base( title string ) {
	<!DOCTYPE html>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
	<title>{ title }</title>

	@autorefresh()
	<script src="/Special:alpinejs-3.14.9.js" defer></script>
	<script src="/Special:htmx-2.0.4.js"></script>
	<script src="/Special:thumbhash-1.0.0.js"></script>

	<script>
	document.addEventListener( "alpine:init", function() {
		Alpine.directive( "htmx", function( el, { expression, modifiers }, { Alpine } ) {
			el.addEventListener( "htmx:beforeSwap", function( ev ) {
				if( ev.detail.isError )
					return;
				ev.preventDefault();
				Alpine.$data( el )[ expression ] = modifiers.includes( "json" ) ? JSON.parse( ev.detail.serverResponse ) : ev.detail.serverResponse;
			} );
		} );

		Alpine.directive( "htmx-err", function( el, { expression, modifiers }, { Alpine } ) {
			el.addEventListener( "htmx:beforeRequest", function( ev ) {
				Alpine.$data( el )[ expression ] = "";
			} );

			el.addEventListener( "htmx:sendError", function( ev ) {
				Alpine.$data( el )[ expression ] = "Can't connect to server";
			} );

			el.addEventListener( "htmx:beforeSwap", function( ev ) {
				if( !ev.detail.isError )
					return;
				ev.preventDefault();
				Alpine.$data( el )[ expression ] = modifiers.includes( "json" ) ? JSON.parse( ev.detail.serverResponse ) : ev.detail.serverResponse;
			} );
		} );
	} );

	function ResetForms( ev ) {
		ev.target.parentElement.querySelectorAll( "form" ).forEach( f => f.reset() );
	}

	function DialogClicked( ev ) {
		// this happens if you click on buttons etc in the dialog
		if( ev.target.tagName != "DIALOG" ) {
			return;
		}

		const rect = ev.target.getBoundingClientRect();
		const x = ev.clientX;
		const y = ev.clientY;
		if( x < rect.left || y < rect.top || x > rect.left + rect.width || y > rect.top + rect.height ) {
			ev.target.close();
		}
	}
	</script>

	<style>
	:root {
		--sidebar-width: 15rem;

		--red: #ff5733;
		--green: #40d39c;
		--blue: #69b3e7;

		--sticky-z: 1;
		--modal-z: 3;

		/* from picocss */
		--icon-search: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='rgb(136,145,164)' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='11' cy='11' r='8'/%3E%3Cpath d='m21 21-4.3-4.3'/%3E%3C/svg%3E");
		/* https://icons8.com/icons/set/cog */
		--icon-cog: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 50'%3E%3Cpath d='m47.2 21.2-6-1-1.4-3.3 3.5-5q.4-.8-.1-1.2l-4-4a1 1 0 0 0-1.2 0L33.2 10q-1.7-.8-3.5-1.4l-1-5.9a1 1 0 0 0-1-.8h-5.5a1 1 0 0 0-1 .8l-1 5.9q-1.7.5-3.4 1.4L12 6.7a1 1 0 0 0-1.3 0l-3.9 4a1 1 0 0 0 0 1.2l3.3 4.9q-.8 1.5-1.4 3.5l-5.9 1a1 1 0 0 0-.8 1v5.4q0 .9.8 1l5.9 1q.5 1.8 1.4 3.5L6.7 38a1 1 0 0 0 0 1.3l4 3.9q.5.5 1.2 0l4.9-3.3q1.5.9 3.4 1.4l1 5.9q.2.7 1 .8h5.5a1 1 0 0 0 1-.8l1-6q1.8-.4 3.5-1.4l4.9 3.5q.7.4 1.3-.1l3.8-4q.6-.5.1-1.2l-3.5-4.9q.9-1.5 1.5-3.4l5.9-1q.7-.1.8-1v-5.5q-.1-.8-.8-1M25 32a7 7 0 1 1 0-14 7 7 0 0 1 0 14'/%3E%3C/svg%3E");
	}

	* {
		box-sizing: border-box;
	}

	[x-cloak], .error:empty {
		display: none !important;
	}

	body {
		font-family: sans-serif;
		line-height: 1.5;
		margin: 0;
	}

	body:has( dialog:open ) {
		overflow: hidden;
	}

	body:has( dialog.fullscreen ) ::backdrop {
		background: rgba( 0, 0, 0, 0.9 );
	}

	h1, h2, h3 {
		margin: 0;
	}

	a { color: var( --blue ); }
	a:visited { color: var( --blue ); }

	fieldset {
		border: 0;
		margin: 0;
		padding: 0;
	}

	fieldset:disabled {
		color: #aaa;
	}

	input[type=text], input[type=password], input[type=search] {
		border: 1px solid #767676;
		border-radius: 3px;
		font-size: 100%;
		padding: 0.5rem;
		width: 100%;
	}

	input:focus, input[type=text]:focus, input[type=password]:focus, input[type=search]:focus {
		border-color: #333;
		outline: 1.5px solid var( --blue );
	}

	input:is(:disabled, :read-only), input[type=text]:is(:disabled, :read-only), input[type=password]:is(:disabled, :read-only) {
		background: #fafafa;
		color: #545454;
	}

	input[type=radio], input[type=checkbox] {
		margin-left: 0;
	}

	input[type=search] {
		padding-left: calc( 0.9rem + 1lh );
		background-image: var( --icon-search );
		background-repeat: no-repeat;
		background-position: 0.5rem center;
		background-size: 1lh;
	}

	button {
		background: #efefef;
		border: 1px solid #767676;
		border-radius: 3px;
		font-size: 85%;
		padding: 0.25rem 0.5rem;
	}

	button:hover { background: #e5e5e5; }
	button:active { background: #f5f5f5; }

	@keyframes spinning {
		0%   { left: 0; }
		25%  { left: 0.1rem; }
		75%  { left: -0.1rem; }
		100% { left: 0; }
	}

	button:disabled {
		position: relative;
		animation spinning 0.15 infinite;
	}

	@media (max-width: 479px) {
		button {
			font-size: 70%;
		}
	}

	.error {
		color: var( --red );
		font-weight: bold;
	}

	.avatar {
		aspect-ratio: 1;
		object-fit: cover;
		object-position: 50% 50%;
		vertical-align: middle;
		border-radius: 50%;
	}

	dialog {
		width: max-content;
		padding: 0.5rem;
		background: #fff;
		border: 4px solid #333;
		outline: 0; /* dialogs get outlines when using arrow keys */
	}

	dialog:has( > form ) {
		top: -20%;
	}

	form {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	form + form {
		margin-top: 1rem;
	}

	form button {
		width: max-content;
	}
	</style>
}

templ baseWithSidebar( user User, current_url string, title string, body templ.Component ) {
	@base( title )

	<style>
	main {
		margin-left: var( --sidebar-width );
	}
	</style>

	{{
		albums, err := queries.GetAlbumsForUser( ctx, user.ID )
		if err != nil {
			return err
		}
	}}

	<script>
	function MakeSlug( str ) {
		str = str.toLowerCase();
		str = str.replace( /^\s+|\s+$/g, "" ); // trim

		// remove diacritics
		const from = "ãàáäâẽèéëêìíïîõòóöôùúüûñç";
		const to   = "aaaaaeeeeeiiiiooooouuuunc";
		for( let i = 0; i < from.length; i++ ) {
			str = str.replace( new RegExp( from.charAt( i ), "g" ), to.charAt( i ) );
		}

		str = str.replace( /[^\w ]/g, "" ); // strip non-chars/letters
		str = str.replace(/\s+/g, '-') // replace whitespace with -

		return str;
	}

	function MakeAlbumList() {
		return {{ toHTMLAlbums( albums ) }};
	}
	</script>

	<body x-data="{ albums: MakeAlbumList() }">
		<nav x-data="{ search: '' }">
			<style>
			@scope to (dialog) {
				:scope {
					display: flex;
					flex-direction: column;
					position: fixed;
					left: 0;
					top: 0;
					bottom: 0;
					width: var( --sidebar-width );
					background: #eee;
					border-right: 1px solid #ccc;
					padding: 0.5rem;
				}

				a {
					color: black;
					display: flex;
					gap: 0.5rem;
					text-decoration: none;
				}

				a:hover {
					text-decoration: underline;
				}

				a:visited {
					color: black;
				}

				a img {
					aspect-ratio: 1;
					object-fit: cover;
					object-position: 50% 50%;
				}

				a.album, button, input {
					margin-block: 0.25rem;
				}

				a.album span {
					white-space: nowrap;
					text-overflow: ellipsis;
					overflow-x: hidden;
				}

				.curr {
					font-weight: bold;
				}

				hr {
					width: 50%;
					border-color: transparent;
				}

				.placeholder {
					border: 1px solid #333;
					width: 1lh;
					height: 1lh;
				}
			}
			</style>

			<b>{ user.Username }gram</b>

			<hr>

			@navlink( current_url, "/Special:account", "Account settings", false )
			<a href="/Special:logout">Log out</a>

			<hr>

			@navlink( current_url, "/", "Library", false )
			@navlink( current_url, "/Special:deleted", "Deleted", false )

			<hr>

			@createAlbumButton()
			<input type="search" placeholder="Search albums" x-model="search">

			<div style="
				display: flex;
				flex-direction: column;
				overflow-y: auto;
				flex-grow: 1;
				margin-right: -0.5rem;
				padding-right: 0.5rem;
			">
				<template x-for="album in albums">
					<template x-if="album.Name.toLowerCase().includes( search.toLowerCase() )">
						<a class="album" :href="'/' + album.UrlSlug" :class="window.location.pathname.startsWith( '/' + album.UrlSlug ) ? 'curr' : ''">
							<template x-if="album.KeyPhotoSha256.length > 0">
								<img :src="'/Special:thumbnail/' + album.KeyPhotoSha256" style="height: 1lh">
							</template>
							<template x-if="album.KeyPhotoSha256.length == 0">
								<span class="placeholder"></span>
							</template>

							<span x-text="album.Name"></span>
						</a>
					</template>
				</template>
			</div>
		</nav>

		@body
	</body>
}

templ guestBase( title string, body templ.Component ) {
	@base( title )
	@body
}
