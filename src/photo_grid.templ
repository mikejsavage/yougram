package main

import "encoding/hex"
import "fmt"
import "time"
import "mikegram/sqlc"

type BaseURLs struct {
	Asset string
	Thumbnail string
	Download string
}

templ photogrid( photos []Photo, base_urls BaseURLs ) {
	<script>
	function MakeThumbhash( img, thumbhash ) {
		let raw_thumbhash = atob( thumbhash );
		let u8_thumbhash = new Uint8Array( raw_thumbhash.length );
		for( let i = 0; i < raw_thumbhash.length; i++ ) {
			u8_thumbhash[ i ] = raw_thumbhash.charCodeAt( i );
		}
		img.src = thumbHashToDataURL( u8_thumbhash );
	}

	document.addEventListener( "alpine:init", () => {
		Alpine.data( "photos", () => ( {
			base_year: 2014,
			year_transitions: [ 0.1, 0.3, 0.5, 0.6, 0.9 ],

			height: 0,
			top: 0,
			visible_start: 0,
			visible_end: 0,

			fullscreen: null,
			fullscreen_thumbnail_loaded: false,
			fullscreen_thumbnail_failed: false,
			fullscreen_asset_loaded: false,
			fullscreen_asset_failed: false,

			StripPx( size ) {
				return size.replace( /px$/, "" );
			},

			GridSpec() {
				let cols = window.getComputedStyle( document.querySelector( ".grid" ) ).gridTemplateColumns.split( " " );
				let gap = window.getComputedStyle( document.querySelector( ".grid" ) ).gap;
				return {
					cols: cols.length,
					row_height: parseFloat( this.StripPx( cols[ 0 ] ) ),
					gap: parseFloat( this.StripPx( gap ) ),
				};
			},

			UpdateLayout() {
				// TODO: account for grid pos on page
				const grid = this.GridSpec();

				const top = window.visualViewport.pageTop - window.visualViewport.height * 0.5;
				const bottom = window.visualViewport.pageTop + window.visualViewport.height * 1.5;

				const row_height = parseFloat( grid.row_height ) + parseFloat( grid.gap );

				const photos = Alpine.store( "photos" );

				const last_row = Math.ceil( photos.length / grid.cols );
				const top_row = Math.max( 0, Math.min( last_row, Math.floor( top / row_height ) ) );
				const bottom_row = Math.min( last_row, Math.ceil( bottom / row_height ) );

				this.visible_start = Math.min( photos.length, top_row * grid.cols );
				this.visible_end = Math.min( photos.length, bottom_row * grid.cols );

				this.height = ( grid.row_height * last_row + grid.gap * Math.max( 0, last_row - 1 ) ) + "px";
				this.top = ( grid.row_height * top_row + grid.gap * Math.max( 0, top_row - 1 ) ) + "px";
			},

			EnterFullscreen( idx ) {
				const photos = Alpine.store( "photos" );

				idx = Math.max( 0, Math.min( photos.length - 1, idx ) );
				if( this.fullscreen == idx )
					return;

				this.fullscreen = idx;
				this.fullscreen_thumbnail_loaded = false;
				this.fullscreen_thumbnail_failed = false;
				this.fullscreen_asset_loaded = false;
				this.fullscreen_asset_failed = false;
			},

			Visible( p ) {
				return { display: p ? 'block' : 'none' };
			},

			PhotoClicked( idx, shift ) {
				if( !this.selecting ) {
					this.EnterFullscreen( idx );
					return;
				}

				if( shift && this.last_selected != null ) {
					for( let i = Math.min( idx, this.last_selected ); i <= Math.max( idx, this.last_selected ); i++ ) {
						Alpine.store( "selected" ).set( i, true );
					}
				}
				else {
					if( Alpine.store( "selected" ).has( idx ) ) {
						Alpine.store( "selected" ).delete( idx );
					}
					else {
						Alpine.store( "selected" ).set( idx, true );
					}
				}
				this.last_selected = idx;
			},
		} ) );
	} );
	</script>

	<div x-data="photos"
		:style="{ height: height }"
		x-init="UpdateLayout()"
		@scroll.window="UpdateLayout()"
		@resize.window="UpdateLayout()"
	>
		<style>
		@scope {
			.grid {
				position: relative;
				display: grid;
				grid-template-columns: repeat( auto-fill, minmax( 6cm, 1fr ) );
				gap: 0.2rem;
				padding: 0.5rem;
			}

			@media (max-width: 479px) {
				.grid {
					padding: 0;
				}
			}

			.stack {
				display: grid;
			}

			.stack img {
				grid-row: 1;
				grid-column: 1;
			}

			.thumbnail > img {
				aspect-ratio: 1;
				width: 100%;
				object-fit: cover;
				object-position: 50% 50%;
			}

			img {
				user-select: none;
				-webkit-user-select: none;
			}

			.selected {
				border: red 2px solid;
			}

			.fullscreen {
				max-width: 100vw;
				max-height: 100vh;
				background: transparent;
				padding: 0;
				border: 0;
				top: 0 !important;
				display: flex;
				justify-content: center;
				align-items: center;
			}

			.fullscreen img {
				width: 100vw;
				max-height: 100vh;
				object-fit: contain;
				user-select: none;
			}

			.settings {
				color: white;
				opacity: 0.2;
				position: fixed;
				top: 2vh;
				right: 2vh;
				transition: opacity 250ms linear;
				transition-delay: 1s;
			}

			.settings:hover {
				opacity: 1;
				transition: none;
			}
		}
		</style>

		<div class="grid" :style="{ top: top }">
			<template x-for="i in visible_end - visible_start">
				<div>
					// NOTE(mike 20250618): if you change an img's src the browser displays the old
					// image until the new one has loaded, so this has to go inside the for loop so
					// the imgs are deleted and recreated when cycling between photos or you get
					// visual glitches
					<template x-if="fullscreen == i - 1">
						<dialog class="fullscreen" x-init="$el.showModal()" @close="fullscreen = null"
							@click="$el.close()"
							@keydown.window.left="EnterFullscreen( fullscreen - 1 )"
							@keydown.window.right="EnterFullscreen( fullscreen + 1 )"
						>
							<div class="stack">
								<img x-init="MakeThumbhash( $el, $store.photos[ fullscreen ].thumbhash )" :style="Visible( !fullscreen_thumbnail_loaded && !fullscreen_asset_loaded )">
								<img :src={ fmt.Sprintf( "'%s' + $store.photos[ fullscreen ].asset", base_urls.Thumbnail ) }
									@load="fullscreen_thumbnail_loaded = true"
									@error="fullscreen_thumbnail_failed = true"
									:style="Visible( !fullscreen_thumbnail_failed && !fullscreen_asset_loaded )">
								<img :src={ fmt.Sprintf( "'%s' + $store.photos[ fullscreen ].asset", base_urls.Asset ) }
									@load="fullscreen_asset_loaded = true"
									@error="fullscreen_asset_failed = true"
									:style="Visible( !fullscreen_asset_failed )">
							</div>

							<div class="settings">
								[cog]
								[bin]
							</div>
						</dialog>
					</template>

					<a class="thumbnail stack"
						:href={ fmt.Sprintf( "'%s' + $store.photos[ visible_start + i - 1 ].asset", base_urls.Asset ) }
						:class="$store.selected.has( visible_start + i - 1 ) ? 'selected' : ''"
						@click.prevent="PhotoClicked( visible_start + i - 1, $event.shiftKey )"
					>
						<img x-init="MakeThumbhash( $el, $store.photos[ visible_start + i - 1 ].thumbhash )">
						<img :src={ fmt.Sprintf( "'%s' + $store.photos[ visible_start + i - 1 ].asset", base_urls.Thumbnail ) } loading="lazy" onload="this.previousElementSibling.remove()" @error="$el.style.display = 'none'">
					</a>
				</div>
			</template>
		</div>
	</div>
}

type AlbumOwnership int
const (
	AlbumOwnership_Owned AlbumOwnership = iota
	AlbumOwnership_SharedWithMe
	AlbumOwnership_Guest
)

templ albumSettingsButton( album sqlc.GetAlbumByURLRow ) {
	<div x-show="!selecting" x-data="{
		name: '',
		url: '',
		auto_slug: true,
		confirm_delete: false,
	}">
		<button command="show-modal" commandfor="albumsettings" @click="confirm_delete = false; ResetForms( $event )" @click="ResetForms">Album settings</button>

		<dialog style="max-width: 25rem" id="albumsettings" @click="DialogClicked">
			<form
				hx-post="/Special:albumSettings"
				hx-target="find .error"
				hx-swap="textContent"
				hx-disabled-elt="find button"
				hx-on::before-request="htmx.find('#error').innerText = ''"
			>
				<h2>Album Settings</h2>

				<input type="hidden" name="album_id" value={ album.ID }>

				<b>Name</b>
				<input type="text" name="name" x-model="name" value={ album.Name } autocomplete="off" required>

				<div>
					<b>URL</b>
					<label>
						<input type="checkbox" x-model="auto_slug"> Auto
					</label>
				</div>

				<input type="text" name="url" x-model="url" value={ album.UrlSlug } autocomplete="off" x-effect="if( auto_slug ) { url = MakeSlug( name ); }" :readonly="auto_slug" required>

				<button type="submit">Save</button>

				<div class="error"></div>
			</form>

			<form hx-delete hx-target="find .error" hx-disabled-elt="find button">
				<h3>Delete album</h3>

				<div>
					Click the button below to mark { album.Name } for deletion in 30 days.
					<a href="/Special:deleted">You can recover it from the Deleted page if you change your mind.</a>
				</div>

				<button type="button" x-show="!confirm_delete" @click="confirm_delete = true">Delete album?</button>
				<button x-cloak x-show="confirm_delete" type="submit">Really delete album</button>

				<div class="error"></div>
			</form>
		</dialog>
	</div>
}

templ shareButton( album sqlc.GetAlbumByURLRow, ownership AlbumOwnership ) {
	<div x-show="!selecting"
		x-data={ templ.JSONString( map[string]any {
			"show_dialog": false,
			"sharing": album.Shared,
			"readonly_secret": album.ReadonlySecret,
			"readwrite_secret": album.ReadwriteSecret,
		} ) }

		@album:start_sharing.window="sharing = true"
		@album:stop_sharing.window="sharing = false"
	>
		<button @click="show_dialog = true">
			<span :style="{ color: sharing ? 'var(--green)' : 'var(--red)' }">&#9679;</span>
			Share
		</button>

		<div class="dropdown"
			x-cloak x-show="show_dialog"
			@click.away="show_dialog = false"
			@keydown.window.escape="show_dialog = false"
		>
			<form style="width: 15rem">
				<h2>Sharing</h2>
				if ownership == AlbumOwnership_Owned {
					<button x-text="sharing ? 'Disable sharing' : 'Enable sharing'"
						hx-post="/Special:shareAlbum" hx-disabled-elt="this"
					/>
					<input type="hidden" name="album_id" value={ album.ID }>
					<input type="hidden" name="share" :value="sharing ? 0 : 1">
				}
				<a href={ templ.URL( guest_url + "/" + album.UrlSlug + "/" + album.ReadonlySecret ) }>Read-only guest link</a>
				<a href={ templ.URL( guest_url + "/" + album.UrlSlug + "/" + album.ReadwriteSecret ) }>Read-write guest link</a>
			</form>
		</div>
	</div>
}

templ selectButton() {
	<button style="display: flex; align-items: center; gap: 0.25rem" @click="selecting = !selecting; $store.selected.clear(); last_selected = null">
		<input type="checkbox" x-model="selecting" class="no-mobile" style="pointer-events: none; margin: 0">
		Select
	</button>
}

templ downloadButton( album sqlc.GetAlbumByURLRow, ownership AlbumOwnership, base_urls BaseURLs ) {
	<div x-show="!selecting" x-data="{
		show: false,
		include: null,
		variants: null,
		heic_as_jpg: null,
	}">
		<button command="show-modal" commandfor="download" @click="ResetForms">
			Download
		</button>

		<dialog id="download" @click="DialogClicked">
			{{ action := base_urls.Download + sel( ownership != AlbumOwnership_Guest, album.UrlSlug, "" ) }}
			<form method="GET" action={ templ.URL( action ) }>
				<h2>Download { album.Name }</h2>

				<div style="display: grid; grid-template-columns: auto auto; column-gap: 1rem">
					<b>Variants</b>
					<div style="display: flex; gap: 1rem">
						<label>
							<input type="radio" name="variants" x-model="variants" value="key_only" checked>
							Key photos only
						</label>
						<label>
							<input type="radio" name="variants" x-model="variants" value="key_and_raw">
							Key + RAW
						</label>
						<label>
							<input type="radio" name="variants" x-model="variants" value="everything">
							Everything
						</label>
					</div>

					<b>Formats</b>
					<fieldset :disabled="variants == 'everything'">
						<label>
							<input type="checkbox" name="heic_as_jpeg" x-model="heic_as_jpg" checked>
							Download HEIC as JPEG
						</label>
					</fieldset>
				</div>

				<button type="submit">Download</button>
			</form>
		</dialog>
	</div>
}

templ downloadSelectedButton( base_urls BaseURLs ) {
	<div x-cloak x-show="selecting" x-data="{
		show: false,
		include: null,
		variants: null,
		heic_as_jpg: null,
	}">
		<button command="show-modal" commandfor="downloadselected" @click="ResetForms" :disabled="$store.selected.size == 0">
			Download
		</button>

		<dialog id="downloadselected" @click="DialogClicked">
			<form method="POST" action={ templ.URL( base_urls.Download ) }
				@submit="$el.querySelector( 'input[name=photos]' ).value = PhotosFormValue()"
			>
				<input type="hidden" name="photos">

				<h2>Download <span x-text="$store.selected.size"></span> selected</h2>

				<div style="display: grid; grid-template-columns: auto auto; gap: 0.5rem 1rem">
					<b>Variants</b>
					<div style="display: flex; gap: 1rem">
						<label>
							<input type="radio" name="variants" x-model="variants" value="key_only" checked>
							Key photos only
						</label>
						<label>
							<input type="radio" name="variants" x-model="variants" value="key_and_raw">
							Key + RAW
						</label>
						<label>
							<input type="radio" name="variants" x-model="variants" value="everything">
							Everything
						</label>
					</div>

					<b>Formats</b>
					<fieldset :disabled="variants == 'everything'">
						<label>
							<input type="checkbox" name="heic_as_jpeg" x-model="heic_as_jpg" checked>
							Download HEIC as JPEG
						</label>
					</fieldset>
				</div>

				<button type="submit">Download</button>
			</form>
		</dialog>
	</div>
}

templ uploadButton() {
	<script>
	function MakeUploadForm() {
		return {
			files: [ ],

			Upload( idx ) {
				if( idx >= this.files.length ) {
					return;
				}

				const xhr = new XMLHttpRequest();
				xhr.open( "PUT", window.location.pathname, true );
				xhr.upload.onprogress = e => this.files[ idx ].progress = e.loaded / e.total;
				xhr.onload = () => {
					this.files[ idx ].progress = 1;
					this.Upload( idx + 1 );
				};

				let data = new FormData();
				data.append( "assets", this.files[ idx ].file );

				xhr.send( data );

				this.files[ idx ].xhr = xhr;
			},

			async Changed( e ) {
				let first_new = this.files.length;
				this.totoa

				for( const file of e.target.files ) {
					let promise = new Promise( function( resolve ) {
						let reader = new FileReader();
						reader.onload = function( e ) {
							resolve( e.target.result );
						};
						reader.readAsDataURL( file );
					} );

					this.files.push( {
						file: file,
						name: file.name,
						thumbnail: await promise,
						progress: 0,
					} );
				}

				this.Upload( first_new );
			},

			Cancel( idx ) {
			},
		};
	}
	</script>

	<div x-show="!selecting" x-data="MakeUploadForm()">
		<style>
		@scope {
			img {
				aspect-ratio: 1;
				width: 2rem;
				object-fit: cover;
				object-position: 50% 50%;
				vertical-align: middle;
				margin: 0.25rem 0;
			}
		}
		</style>

		<button type="button">
			<label>
				Upload
				<input type="file" name="photos" accept=".jpg,.jpeg,.png,.heic,image/heic,image/*,video/*" multiple @change="Changed" style="display: none">
			</label>
		</button>

		<div class="dropdown" x-cloak x-show="files.length > 0">
			<div style="max-height: 50vh; overflow-y: scroll">
				<template x-for="(file, i) in files">
					<div>
						<!-- <img :src="file.thumbnail"> -->
						<span x-text="Math.floor( file.progress * 100 )"></span>%
						<span x-text="file.name"></span>
					</div>
				</template>
			</div>
		</div>
	</div>
}

templ addToAlbumButton() {
	<style>
	button:has(+ .dropdown:not([style*="display: none"])) {
		/* border-bottom: 0;
		border-bottom-left-radius: 0;
		border-bottom-right-radius: 0; */
		outline: 1.5px solid var( --blue );
	}
	</style>

	<script>
	function ClearStatuses( button ) {
		for( let e of button.parentNode.querySelectorAll( ".status" ) ) {
			e.innerText = "";
		}
	}
	</script>

	<div x-cloak x-show="selecting" x-data="{ show: false, search: '' }">
		<button class="chevron" :disabled="$store.selected.size == 0" @click="show = true; search = ''; ClearStatuses( $el )">Add to</button>

		<div class="dropdown" x-cloak x-show="show" @click.away="show = false" @keydown.escape.window="show = false">
			<style>
			@scope {
				button {
					border: 0;
					border-radius: 0;
					background: unset;
					display: flex;
					gap: 0.5rem;
					align-items: center;
					font-size: 100%;
					margin: -0.25rem -0.5rem;
					padding: 0.25rem 0.5rem;
					text-align: left;
					font-size: 1rem;
					line-height: 1.5;
				}

				img {
					aspect-ratio: 1;
					object-fit: cover;
					object-position: 50% 50%;
				}

				.placeholder {
					border: 1px solid #333;
					width: 1lh;
					height: 1lh;
				}
			}
			</style>

			<div style="display: flex; flex-direction: column; gap: 0.5rem">
				<input type="search" placeholder="Search albums" x-model="search">

				<template x-for="album in albums">
					<template x-if="album.Name.toLowerCase().includes( search.toLowerCase() ) && !window.location.pathname.startsWith( '/' + album.UrlSlug )">
						<button
							:hx-put="'/Special:addToAlbum/' + album.UrlSlug"
							hx-vals="js:{ photos: PhotosFormValue() }"
							hx-disabled-elt="this"
							hx-target="find .status"
						>
							<template x-if="album.KeyPhotoSha256.length > 0">
								<img :src="'/Special:thumbnail/' + album.KeyPhotoSha256" style="height: 1lh">
							</template>
							<template x-if="album.KeyPhotoSha256.length == 0">
								<span class="placeholder"></span>
							</template>

							<span x-text="album.Name"></span>

							<span class="status"></span>
						</button>
					</template>
				</template>
			</div>
		</div>
	</div>
}

templ removeFromAlbumButton( album sqlc.GetAlbumByURLRow ) {
	<button x-cloak x-show="selecting" :disabled="$store.selected.size == 0"
		hx-put={ templ.URL( "/Special:removeFromAlbum/" + album.UrlSlug ) }
		hx-vals="js:{ photos: PhotosFormValue() }"
	>
		Remove from { album.Name }
	</button>
}

templ selectionButtons( album *sqlc.GetAlbumByURLRow, owned bool, base_urls BaseURLs ) {
	if owned {
		<button x-cloak x-show="selecting" @click="$store.photos.map( ( _, i ) => $store.selected.set( i, true ) )">Select all</button>
		<button x-cloak x-show="selecting" @click="$store.selected.clear(); last_selected = null">Deselect all</button>
		@addToAlbumButton()

		if album != nil {
			/* <button class="chevron" x-cloak x-show="selecting" :disabled="$store.selected.size == 0">Move to</button> */
			@removeFromAlbumButton( *album )
		}
	}

	@downloadSelectedButton( base_urls )
	@selectButton()
}

func showNullableDate( date interface{} ) string {
	return time.Unix( date.(int64), 0 ).Format( "Jan 2006" )
}

templ albumHeader( album sqlc.GetAlbumByURLRow, photos []Photo, ownership AlbumOwnership, can_upload bool, base_urls BaseURLs ) {
	<div class="left">
		<h1>{ album.Name }</h1>
		<span style="font-size: 80%" class="no-mobile">
			if ownership != AlbumOwnership_Owned {
				<span>{ album.OwnerUsername }'s album</span>
			}

			{{ date_range := try1( queries.GetAlbumDateRange( ctx, album.ID ) ) }}
			if date_range.OldestPhoto != nil && date_range.NewestPhoto != nil {
				<span>{ showNullableDate( date_range.OldestPhoto ) } &ndash; { showNullableDate( date_range.NewestPhoto ) }</span>
			}
			<span>{ len( photos ) } { sel( len( photos ) == 1, "photo", "photos" ) }</span>
		</span>
	</div>

	<div style="flex-grow: 1"></div>

	<div class="right">
		if ownership == AlbumOwnership_Owned {
			@albumSettingsButton( album )
		}

		if ownership != AlbumOwnership_Guest {
			@shareButton( album, ownership )
		}

		if can_upload {
			@uploadButton()
		}

		@downloadButton( album, ownership, base_urls )
		@selectionButtons( &album, ownership == AlbumOwnership_Owned, base_urls )
	</div>
}

templ guestReadWriteWarning( album sqlc.GetAlbumByURLRow, can_upload bool ) {
	if can_upload {
		<div style="font-weight: bold; padding: 0.5rem 0.5rem 0">
			This page lets you add and remove photos so don't share it with randoms, give them
			<a href={ templ.URL( guest_url + "/" + album.UrlSlug + "/" + album.ReadonlySecret ) }>this read only link</a>
			instead!!
		</div>
	}
}

templ photogridWithHeader( photos []Photo, subheader templ.Component, base_urls BaseURLs ) {
	<meta name="apple-mobile-web-app-title" content="yougram"></meta>
	<meta name="apple-mobile-web-app-capable" content="yes"></meta>
	<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"></meta>

	<style>
	html {
		padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
	}

	/* see https://www.w3schools.com/Css/css_dropdowns.asp */
	.dropdown {
		position: relative;
	}

	.dropdown > * {
		position: absolute;
		top: 1rem;
		right: 0;
		z-index: var( --modal-z );
		width: max-content;
		padding: 0.5rem;
		background: #fff;
		border: 4px solid #333;
		box-shadow: 0 0 10px #666;
	}
	</style>

	<script>
	document.addEventListener( "alpine:init", () => {
		Alpine.store( "photos", {{ photos }} );
		Alpine.store( "selected", new Map() );
	} );

	function PhotosFormValue() {
		let ids = '';
		for( const idx of Alpine.store( "selected" ).keys() ) {
			ids = ids + ',' + Alpine.store( "photos" )[ idx ].id.toString();
		}
		return ids.substr( 1 );
	}
	</script>

	<main x-data="{ selecting: false, last_selected: null }">
		<aside>
			<style>
			@scope {
				:scope {
					position: sticky;
					top: 0;
					z-index: var( --sticky-z );
					padding: 0.5rem;
					background: white;
					border-bottom: 1px solid #ccc;

					display: flex;
					flex-direction: row;
					align-items: center;
					gap: 1rem;
				}

				.left {
					display: flex;
					flex-direction: column;
					flex-shrink: 0;
				}

				.left > span {
					display: flex;
					flex-direction: row;
					align-items: center;
					gap: 1rem;
				}

				.right {
					display: flex;
					flex-direction: row;
					align-items: center;
					flex-wrap: wrap;
					justify-content: flex-end;
					gap: 0.5rem 1rem;
				}

				.right > div {
					/* line-height: 1; */
				}

				@media (max-width: 479px) {
					:scope {
						background: linear-gradient( to top, transparent, rgba( 0, 0, 0, 0.4 ) 0.5rem );
						border: 0;
						margin-top: calc( -1 * env( safe-area-inset-top ) );
						padding-top: max( 0.5rem, env( safe-area-inset-top ) );
						padding-bottom: 1rem;
						margin-bottom: -0.5rem;
					}

					h1 {
						color: #fff;
						font-size: 1rem;
					}

					.no-mobile {
						display: none !important;
					}

					.right {
						gap: 0.5rem;
					}
				}
			}
			</style>

			{ children... }
		</aside>

		if subheader != nil {
			@subheader
		}

		<noscript>
			<div style="padding: 0.5rem">Sorry but nothing works without Javascript</div>
		</noscript>

		@photogrid( photos, base_urls )
	</main>
}

func getStandardBaseURLs() BaseURLs {
	return BaseURLs {
		Asset: "/Special:asset/",
		Thumbnail: "/Special:thumbnail/",
		Download: "/Special:download",
	}
}

func makeGuestBaseURLs( album sqlc.GetAlbumByURLRow, can_upload bool ) BaseURLs {
	base := fmt.Sprintf( "/%s/%s", album.UrlSlug, sel( can_upload, album.ReadwriteSecret, album.ReadonlySecret ) )
	return BaseURLs {
		Asset: base + "/asset/",
		Thumbnail: base + "/thumbnail/",
		Download: base + "/download",
	}
}

templ libraryTemplate( photos []Photo ) {
	{{ base_urls := getStandardBaseURLs() }}
	@photogridWithHeader( photos, nil, base_urls ) {
		<div class="left">
			<h1>Library</h1>
			<span style="font-size: 80%" class="no-mobile">
				<span>25&ThinSpace;&ndash;&ThinSpace;27 Jan 2025</span>
				<span>{ len( photos ) } { sel( len( photos ) == 1, "photo", "photos" ) }</span>
			</span>
		</div>

		<div style="flex-grow: 1"></div>

		<div class="right">
			@uploadButton()
			@selectionButtons( nil, true, base_urls )
		</div>
	}
}

templ albumTemplate( album sqlc.GetAlbumByURLRow, photos []Photo, ownership AlbumOwnership ) {
	<style>
	.chevron {
		/* from picocss */
		background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none' stroke='rgb(136, 145, 164)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='m6 9 6 6 6-6'/%3E%3C/svg%3E");
		background-repeat: no-repeat;
		background-position: center right 0.3rem;
		background-size: 1lh;
		padding-right: calc( 0.4rem + 1lh );
	}
	</style>

	{{ base_urls := getStandardBaseURLs() }}
	@photogridWithHeader( photos, nil, base_urls ) {
		@albumHeader( album, photos, ownership, true, base_urls )
	}
}

templ guestAlbumTemplate( album sqlc.GetAlbumByURLRow, photos []Photo, can_upload bool ) {
	<meta property="og:title" content={ album.Name }>
	<meta property="og:image" content={ fmt.Sprintf( "%s/%s/%s/thumbnail/%s", guest_url, album.UrlSlug, album.ReadonlySecret, hex.EncodeToString( album.KeyPhotoSha256 ) ) }>

	{{ base_urls := makeGuestBaseURLs( album, can_upload ) }}
	{{ subheader := guestReadWriteWarning( album, can_upload ) }}

	@photogridWithHeader( photos, subheader, base_urls ) {
		@albumHeader( album, photos, AlbumOwnership_Guest, can_upload, base_urls )
	}
}
