package main

templ albumTemplate( album AlbumMetadata, photos []Photo ) {
	<style>
	.photos {
		display: grid;
		grid-template-columns: repeat( 3, 1fr );
		gap: 0.5rem;
		padding: 0.5rem;
	}

	@media screen and (min-width: 700px) {
		.photos { grid-template-columns: repeat( 4, 1fr ); }
	}

	@media screen and (min-width: 1400px) {
		.photos { grid-template-columns: repeat( 5, 1fr ); }
	}

	.thumbnail img {
		aspect-ratio: 1;
		width: 100%;
		object-fit: cover;
		object-position: 50% 50%;
	}

	.fullscreen {
		background: rgba( 26, 26, 26, 0.75 );
		position: fixed;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.fullscreen img {
		width: 100vw;
		max-height: 100vh;
		object-fit: contain;
		padding: 2.5vmax;
		user-select: none;
	}

	.stack {
		display: grid;
	}

	.stack > * {
		grid-row: 1;
		grid-column: 1;
	}
	</style>

	<aside>
		<h1>{ album.Name }</h1>
		<span>Oct 2023 &ndash; Jan 2025</span>
		<span>26 photos and 4 videos</span>

		<span class="spacer"></span>

		<button>Album settings</button>

		<div
			x-data={ templ.JSONString( map[string]any {
				"show_dialog": false,
				"sharing": album.Shared,
				"readonly_secret": album.ReadonlySecret,
				"readwrite_secret": album.ReadwriteSecret,
			} ) }

			@album:start_sharing.window="sharing = true"
			@album:stop_sharing.window="sharing = false"
		>
			<style>
			@scope {
				button {
					white-space: nowrap;
				}

				button.open {
					background: white;
				}

				.dialog {
					position: absolute;
					right: 10px;
					top: 50px;
					width: 15rem;
					border-radius: 0.5rem;
					padding: 0.5rem;
					background: #fff;
					border: 1px solid #ccc;
					box-shadow: 0 0 10px #666;
					z-index: 1;
				}
			}
			</style>

			<button @click="show_dialog = !show_dialog" :class="show_dialog ? 'open' : ''">
				<span :style="{ color: sharing ? 'var(--green)' : 'var(--red)' }">&#9679;</span>
				Sharing
			</button>

			<form class="dialog" x-cloak x-show="show_dialog" @click.away="show_dialog = false">
				<button
					x-text="sharing ? 'Disable sharing' : 'Enable sharing'"
					hx-post="/Special:share"
					hx-disabled-elt="this"
				/><br>
				<input type="hidden" name="album_id" value={ album.ID }>
				<input type="hidden" name="share" :value="sharing ? 0 : 1">
				Read-only link: { album.ReadonlySecret }<br>
				Read-write link: { album.ReadwriteSecret }<br>
			</form>
		</div>

		if album.GuestWriteable {
			<button>Upload</button>
		}
	</aside>

	if album.GuestWriteable {
		<script>
		function MakeUploadForm() {
			return {
				files: [ ],

				Upload( idx ) {
					if( idx >= this.files.length ) {
						return;
					}

					const xhr = new XMLHttpRequest();
					xhr.open( "POST", window.location.pathname, true );
					xhr.upload.onprogress = e => this.files[ idx ].progress = e.loaded / e.total;
					xhr.onload = () => {
						this.files[ idx ].progress = 1;
						this.Upload( idx + 1 );
					};

					let data = new FormData();
					data.append( "photos", this.files[ idx ].file );

					xhr.send( data );

					this.files[ idx ].xhr = xhr;
				},

				async Changed( e ) {
					let first_new = this.files.length;

					for( const file of e.target.files ) {
						let promise = new Promise( function( resolve ) {
							let reader = new FileReader();
							reader.onload = function( e ) {
								resolve( e.target.result );
							};
							reader.readAsDataURL( file );
						} );

						this.files.push( {
							file: file,
							name: file.name,
							thumbnail: await promise,
							progress: 0,
						} );
					}

					this.Upload( first_new );
				},

				Cancel( idx ) {
				},
			};
		}
		</script>

		/*
		<header x-data="MakeUploadForm()">
			<style>
			@scope {
				:scope {
					background: red;
					position: sticky;
					top: 0;
					padding: 1rem;
					margin-bottom: 1rem;
				}

				img {
					aspect-ratio: 1;
					width: 2rem;
					object-fit: cover;
					object-position: 50% 50%;
					vertical-align: middle;
					margin: 0.25rem 0;
				}
			}
			</style>

			<b>This link lets you add and remove photos, pls don't share it</b>

			<form action="/{{ .AlbumURL }}" method="POST" enctype="multipart/form-data">
				<label>Add photos <input type="file" name="photos" multiple @change="Changed" x-show="false"></label>

				<template x-for="(file, i) in files">
					<div>
						<img :src="file.thumbnail">
						<span x-text="Math.floor( file.progress * 100 )"></span>%
						<span x-text="file.name"></span>
						<button @click.prevent="Cancel( i )">Cancel</button>
					</div>
				</template>

				<div x-show="false"><input type="submit"></div>
			</form>
		</header>
		*/
	}

	<script>
	function MakeThumbhash( img, thumbhash ) {
		let raw_thumbhash = atob( thumbhash );
		let u8_thumbhash = new Uint8Array( raw_thumbhash.length );
		for( let i = 0; i < raw_thumbhash.length; i++ ) {
			u8_thumbhash[ i ] = raw_thumbhash.charCodeAt( i );
		}
		img.src = thumbHashToDataURL( u8_thumbhash );
	}

	document.addEventListener( "alpine:init", () => {
		Alpine.data( "photos", () => ( {
			photos: {{ photos }},
			fullscreen: null,
			base_year: 2014,
			year_transitions: [ 0.1, 0.3, 0.5, 0.6, 0.9 ],
			height: 0,
			top: 0,
			visible_range: [ 0, 0 ],

			StripPx( size ) {
				return size.replace( /px$/, "" );
			},

			GridSpec() {
				let cols = window.getComputedStyle( document.querySelector( ".grid" ) )[ "grid-template-columns" ].split( " " );
				let gap = window.getComputedStyle( document.querySelector( ".grid" ) )[ "gap" ];
				return {
					cols: cols.length,
					row_height: parseFloat( this.StripPx( cols[ 0 ] ) ),
					gap: parseFloat( this.StripPx( gap ) ),
				};
			},

			UpdateLayout() {
				// TODO: account for grid pos on page
				let grid = this.GridSpec();

				let top = window.visualViewport.pageTop - window.visualViewport.height * 0.5;
				let bottom = window.visualViewport.pageTop + window.visualViewport.height * 1.5;

				let row_height = parseFloat( grid.row_height ) + parseFloat( grid.gap );

				let last_row = Math.ceil( this.photos.length / grid.cols );
				let top_row = Math.max( 0, Math.min( last_row, Math.floor( top / row_height ) ) );
				let bottom_row = Math.min( last_row, Math.ceil( bottom / row_height ) );

				this.visible_range = [
					Math.min( this.photos.length, top_row * grid.cols ),
					Math.min( this.photos.length, bottom_row * grid.cols ),
				];

				this.height = ( grid.row_height * last_row + grid.gap * Math.max( 0, last_row - 1 ) ) + "px";
				this.top = ( grid.row_height * top_row + grid.gap * Math.max( 0, top_row - 1 ) ) + "px";
			},
		} ) );
	} );
	</script>

	<div class="photos"
		x-data="photos"
		:style="{ height: height }"
		x-init="UpdateLayout()"
		@scroll.window="UpdateLayout()"
		@resize.window="UpdateLayout()"
	>
		<template x-if="fullscreen != null">
			<div class="fullscreen"
				@click="fullscreen = null"
				@keydown.window.escape="fullscreen = null"
				@keydown.window.left="fullscreen = Math.max( 0, fullscreen - 1 )"
				@keydown.window.right="fullscreen = Math.min( photos.length - 1, fullscreen + 1 )"
			>
				<div class="stack">
					<img x-init="MakeThumbhash( $el, photos[ fullscreen ].thumbhash )">
					<img :src="'/Special:thumbnail/' + photos[ fullscreen ].id" onload="this.previousElementSibling.remove()" @error="$el.remove()">
					<img :src="'/Special:image/' + photos[ fullscreen ].id" onload="this.previousElementSibling.remove()" @error="$el.remove()">
				</div>
			</div>
		</template>

		<div class="grid" :style="{ top: top }">
			<template x-for="(photo, i) in photos">
				<a class="thumbnail stack" :href="'/Special:image/' + photo.id" @click.prevent="fullscreen = i">
					<img x-init="MakeThumbhash( $el, photo.thumbhash )">
					<img :src="'/Special:thumbnail/' + photo.id" loading="lazy" onload="this.previousElementSibling.remove()" @error="$el.remove()">
				</a>
			</template>
		</div>
	</div>
}
